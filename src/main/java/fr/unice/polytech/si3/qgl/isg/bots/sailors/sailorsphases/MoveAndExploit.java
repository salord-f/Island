package fr.unice.polytech.si3.qgl.isg.bots.sailors.sailorsphases;

import fr.unice.polytech.si3.qgl.isg.actions.*;
import fr.unice.polytech.si3.qgl.isg.bots.ActionAndPhase;
import fr.unice.polytech.si3.qgl.isg.bots.sailors.InventoryManager;
import fr.unice.polytech.si3.qgl.isg.map.*;
import fr.unice.polytech.si3.qgl.isg.resources.IslandResource;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class MoveAndExploit extends ActionAndPhase {
	private InventoryManager inventoryManager;
	private CellMap cellMap;
	private Position position;
	private AtomicInteger worthlessExplore;

	public MoveAndExploit(InventoryManager inventoryManager, CellMap cellMap, Position position, AtomicInteger worthlessExplore) {
		super(SailorsPhase.MOVEANDEXPLOIT);
		this.inventoryManager = inventoryManager;
		this.cellMap = cellMap;
		this.position = position;
		this.worthlessExplore = worthlessExplore;
	}

	/**
	 * If something can be crafted, go on craft phase.
	 * Otherwise, changes the zone to exploit if it's not a good zone or the zone is finished.
	 * Otherwise, exploit if the last explore was interesting.
	 * If nothing was done, makes an explore if the last action is not an explore.
	 */
	public ActionAndPhase run(List<Cell> cellsToExploit, Action lastAction, SailorsSubPosition subPosition) {
		if (inventoryManager.canCraftSomething()) {
			super.phase = SailorsPhase.CRAFTMANUFACTURED;
			return this;
		}

		if (!isTheRightBiome() || cellsToExploit.isEmpty()) {
			super.phase = SailorsPhase.CHANGINGZONE;
			worthlessExplore.set(0);
			return this;
		}

		if (lastAction.is(ActionName.EXPLORE)) {
			if (!exploitTheResource(lastAction)) {
				moveInsideCell(cellsToExploit, subPosition.getX(), subPosition.getY());
			}
		} else super.actions.add(new Explore());
		return this;
	}

	/**
	 * Returns true if at least one biome of the current cell contains a resource the sailors need.
	 */
	private boolean isTheRightBiome() {
		return !cellMap.getMap().isEmpty() && inventoryManager.getResourcesNeeded().keySet().stream()
				.anyMatch(resource -> cellMap.getCell(position).containsResource(resource));
	}

	/**
	 * Exploit the resource on the cell if it's not in low amounts, harsh condition and it's still needed.
	 *
	 * @return false if no exploit was made, and increment our worthlessExplore counter.
	 */
	private boolean exploitTheResource(Action lastAction) {
		for (IslandResource islandResource : ((Explore) lastAction).getResources()) {
			if (inventoryManager.isNeeded(islandResource.getResource()) && islandResource.validConditions()) {
				super.actions.add(new Exploit(islandResource.getResource()));
				worthlessExplore.set(0);
				return true;
			}
		}
		worthlessExplore.incrementAndGet();
		return false;
	}

	/**
	 * Moves inside the cell, subcell by subcell, in a optimized path
	 * If all the cells are visited, the sailors change zone,
	 * otherwise they go to the next interesting cell.
	 */
	private void moveInsideCell(List<Cell> cellsToExploit, int x, int y) {
		Direction myDirection = cellMap.getCell(position).getPosition().getDirectionInsideCell(x, y);
		if (myDirection == null || worthlessExplore.get() >= 2) {
			worthlessExplore.set(0);
			cellsToExploit.remove(cellMap.getCell(position));
			if (cellsToExploit.isEmpty()) {
				super.phase = SailorsPhase.CHANGINGZONE;
			} else {
				super.phase = SailorsPhase.MOVEBETWEENCELLS;
			}
		} else super.actions.add(new Move(myDirection));
	}
}
