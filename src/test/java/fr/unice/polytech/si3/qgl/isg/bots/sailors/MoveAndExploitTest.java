package fr.unice.polytech.si3.qgl.isg.bots.sailors;

import fr.unice.polytech.si3.qgl.isg.actions.Explore;
import fr.unice.polytech.si3.qgl.isg.bots.sailors.sailorsphases.MoveAndExploit;
import fr.unice.polytech.si3.qgl.isg.bots.sailors.sailorsphases.SailorsPhase;
import fr.unice.polytech.si3.qgl.isg.map.Biome;
import fr.unice.polytech.si3.qgl.isg.map.CellMap;
import fr.unice.polytech.si3.qgl.isg.map.Position;
import fr.unice.polytech.si3.qgl.isg.map.SailorsSubPosition;
import fr.unice.polytech.si3.qgl.isg.resources.Manufactured;
import fr.unice.polytech.si3.qgl.isg.resources.Resource;
import org.junit.Test;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.Assert.assertEquals;

public class MoveAndExploitTest {

	@Test
	public void craftPhaseTest() {
		InventoryManager inventoryManager = new InventoryManager();
		inventoryManager.addResource(Resource.QUARTZ, 10);
		inventoryManager.addResource(Resource.WOOD, 5);
		inventoryManager.addAmount(inventoryManager.getManufacturedNeeded(), Manufactured.GLASS, 1);
		MoveAndExploit moveAndExploit = new MoveAndExploit(inventoryManager, null, null, null);
		moveAndExploit.run(null, null, null);

		assertEquals(SailorsPhase.CRAFTMANUFACTURED, moveAndExploit.getPhase());
	}

	@Test
	public void moveInsideCellTest() {
		Set<Biome> biome = new HashSet<>();
		biome.add(Biome.BEACH);
		CellMap cellMap = new CellMap();
		cellMap.addCell(0, 0, biome);
		Position position = new Position(0, 0);

		InventoryManager inventoryManager = new InventoryManager();
		inventoryManager.addAmount(inventoryManager.getResourcesNeeded(), Resource.QUARTZ, 10);

		MoveAndExploit moveAndExploit = new MoveAndExploit(inventoryManager, cellMap,
				position, new AtomicInteger(0));

		moveAndExploit.run(cellMap.getMap(), new Explore(), new SailorsSubPosition(position, 0, 0));

		assertEquals(SailorsPhase.MOVEANDEXPLOIT, moveAndExploit.getPhase());
	}

	@Test
	public void changingZoneTest() {
		Set<Biome> biome = new HashSet<>();
		biome.add(Biome.TAIGA);
		CellMap cellMap = new CellMap();
		cellMap.addCell(0, 0, biome);
		Position position = new Position(0, 0);

		InventoryManager inventoryManager = new InventoryManager();
		inventoryManager.addAmount(inventoryManager.getResourcesNeeded(), Resource.QUARTZ, 10);

		MoveAndExploit moveAndExploit = new MoveAndExploit(inventoryManager, cellMap,
				position, new AtomicInteger(0));

		moveAndExploit.run(cellMap.getMap(), new Explore(), new SailorsSubPosition(position, 0, 0));

		assertEquals(SailorsPhase.CHANGINGZONE, moveAndExploit.getPhase());
	}

	@Test
	public void exploreNoMoreCellToExploitTest() {
		CellMap cellMap = new CellMap();

		Position position = new Position(0, 0);

		InventoryManager inventoryManager = new InventoryManager();
		inventoryManager.addAmount(inventoryManager.getResourcesNeeded(), Resource.QUARTZ, 10);

		MoveAndExploit moveAndExploit = new MoveAndExploit(inventoryManager, cellMap,
				position, new AtomicInteger(0));

		moveAndExploit.run(cellMap.getMap(), new Explore(), new SailorsSubPosition(position, 0, 0));

		assertEquals(SailorsPhase.CHANGINGZONE, moveAndExploit.getPhase());
	}

	@Test
	public void exploreMoreCellToExploitTest() {
		Set<Biome> biome = new HashSet<>();
		biome.add(Biome.BEACH);
		CellMap cellMap = new CellMap();
		cellMap.addCell(0, 0, biome);
		cellMap.addCell(1, 0, biome);
		Position position = new Position(0, 0);

		InventoryManager inventoryManager = new InventoryManager();
		inventoryManager.addAmount(inventoryManager.getResourcesNeeded(), Resource.QUARTZ, 10);

		MoveAndExploit moveAndExploit = new MoveAndExploit(inventoryManager, cellMap,
				position, new AtomicInteger(0));

		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				cellMap.getCell(position).getPosition().setSubPositionVisited(i, j);
			}
		}

		moveAndExploit.run(cellMap.getMap(), new Explore(), new SailorsSubPosition(position, 0, 0));

		assertEquals(SailorsPhase.MOVEBETWEENCELLS, moveAndExploit.getPhase());
	}


}
